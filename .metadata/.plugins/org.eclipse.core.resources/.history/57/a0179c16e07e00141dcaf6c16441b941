/*
 * Bjr2.java
 * http://villa7.github.io
 *
 * Copyright (C) 2014-2014 Theodore Kluge
 */

package card_games;

import java.util.*;
import villa7.Print;

public class BlackjackRunner2 {
	
	private static double ver = 1.1;
	
	private static int suit;
	private static int value;
	private static int computerCard, userCard, aiCard;
	private static int numPlayers = 0, numAI = 0;
	private static Print p = new Print();
	private static Hand hand = new Hand();
	private static Scanner s = new Scanner(System.in);
	private static String[] players;
	private static ArrayList<String> winners = new ArrayList<String>();

	private static boolean playerTurn = true, aiTurn = true, computerTurn = true;
	private static boolean running = true;
	private static boolean[] isFirstTurn, isAIFT;
	
	private static int userTotal[],
					   aiTotal[],
					   computerTotal;
	
	public static void main(String[] args) {
		
		p.nl("BlackjackGame v" + ver);
		p.nl();
		do {
			p.nl("Number of players (1 - 6):");
			numPlayers = s.nextInt();
		} while (numPlayers <= 0 || numPlayers > 6);

		players = new String[numPlayers];

		for (int i = 0; i < numPlayers; i++) {
			p.nl("Enter name of player " + (i + 1));
			String n = s.next();
			p.nl(i);
			players[i] = n;
			if (n.equalsIgnoreCase("AI") || n.trim().equals("")) {
				for (int c = (i + 1); c < numPlayers; c++) {
					p.nl(c);
					numAI++;
					players[c] = n;
				}
				break;
			}
		}
		
		while (running) {
			hand.newDeck(52);
			hand.newUsedDeck(52);
			
			if (playBlackjack()) {
				int numWinners = 0;
				p.nl("Winners:");
				for (String s : winners) {
					p.nl(s);
				}
				
			} else {
				p.nl("Dealer wins.");
			}
			p.nbsp(3);
			break;
		}
	}
	
	private static boolean playBlackjack() {
		userTotal = new int[numPlayers - numAI];
		aiTotal = new int[numAI];
		computerTotal = 0;
		computerTurn = true;
		isFirstTurn = new boolean[numPlayers];
		isAIFT = new boolean[numPlayers];
		for (int i = 0; i < numPlayers; i++) {
			isFirstTurn[i] = true;
			isAIFT[i] = true;
		}
		
		//draw 2 cards to start
		for (int i = 0; i < numPlayers - numAI; i++) {	
			userTotal[i] += hand.drawRandomCard();
			userTotal[i] += hand.drawRandomCard();
		}
		for (int i = 0; i < numAI; i++) {
			aiTotal[i] += hand.drawRandomCard();
			aiTotal[i] += hand.drawRandomCard();
		}
		computerTotal += hand.drawRandomCard();
		p.nl("The dealer has a " + computerTotal + " and an unknown card.");
		computerTotal += hand.drawRandomCard();
		
		while(true) {
			
			for (int i = 0; i < numPlayers - numAI; i++) {
				p.nl("Player " + (i + 1) + " (" + players[i] + "'s) turn:");
				playerTurn = true;
				while (playerTurn) {
					
					while (userTotal[i] > 21 && isFirstTurn[i]) {
						//playerTurn = false;
						//p.nl("Sorry, redrawing...");
						userTotal[i] = 0;
						userTotal[i] += hand.drawRandomCard();
						userTotal[i] += hand.drawRandomCard();
					}
					p.nl("Your cards add up to " + userTotal[i]);
					
					p.nl("Enter an action: [hit | stand]");
					String userAction = s.next();
					
					if(userAction.equalsIgnoreCase("quit")) {
						running = false;
						return false;
					} else if (userAction.equalsIgnoreCase("hit")) {
						userCard = hand.drawRandomCard();
						p.nl("You hit.");
						p.nl("You drew a " + userCard);
						userTotal[i] += userCard;
						p.nl("Your total is " + userTotal[i]);
						if (userTotal[i] > 21) {
							p.nl("Player " + (i + 1) +  " loses.");
							playerTurn = false;
						}
					} else if (userAction.equalsIgnoreCase("stand")) {
						p.nl("You stand.");
						playerTurn = false;
					} else {
						p.nl("Please enter a valid action. [hit | stand]");
					}
					isFirstTurn[i] = false;
				}
			}
			for (int i = 0; i < numAI; i++) {
				aiTurn = true;
				while(aiTurn) {
					while (aiTotal[i] > 21 && isAIFT[i]) {
						aiTotal[i] = 0;
						aiTotal[i] += hand.drawRandomCard();
						aiTotal[i] += hand.drawRandomCard();
					}
					if (aiTotal[i] < 17) { //AI uses the dealer's logic
						aiCard = hand.drawRandomCard();
						p.nl("AI #" + (i+1) + " drew " + aiCard);
						aiTotal[i] += aiCard;
						p.nl("AI #" + (i+1) + " has a total of " + aiTotal[i]);
						if (aiTotal[i] > 21) {
							p.nl("AI #" + (i+1) + " loses.");
							aiTurn = false;
						}
					} else {
						p.nl("AI #" + (i+1) + " stands.");
						aiTurn = false;
					}
					isAIFT[i] = false;
				}
			}
			
			//Dumb AI
			while (computerTurn) {
				if (computerTotal == 21) { //if dealer has 21, he wins
					for (int i = 0; i < numPlayers - numAI; i++) {
						if (userTotal[i] == 21) { //unless player also has 21
							p.nl("checking total of p" + (i+1));
							winners.add(players[i]);
						}
					}
					for (int i = 0; i < numAI; i++) {
						if (aiTotal[i] == 21) {
							p.nl("checking total of ai" + (i+1));
							winners.add(players[numPlayers + i] + " #" + (i + 1));
						}
					}
					if (winners.size() > 0) { //if there is at least one winner
						computerTurn = false;
						return true;
					} else {
						return false;
					}
				} else if (computerTotal < 17) {
					computerCard = hand.drawRandomCard();
					p.nl("Dealer drew " + computerCard);
					computerTotal += computerCard;
					p.nl("Dealer has " + computerTotal);
				} else {
					p.nl("Dealer stands.");
					for (int i = 0; i < numPlayers - numAI; i++) {
						if (userTotal[i] > computerTotal) {
							p.nl("checking total of p" + (i+1));
							winners.add(players[i]);
						}
					}
					for (int i = 0; i < numAI; i++) {
						if (aiTotal[i] > computerTotal) {
							p.nl("checking total of ai" + (i+1));
							winners.add(players[(numPlayers - numAI) + i - 1] + " #" + (i + 1));
						}
					}
					if (winners.size() > 0) {
						computerTurn = false;
						return true;
					} else {
						return false;
					}
				}
			}
			
			//win logic
			p.nl(winners.size());
			if (computerTotal > 21) {
				for (int i = 0; i < numPlayers; i++) {
					winners.add(players[i]);
				}
				if (winners.size() > 0) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}
	}
}
